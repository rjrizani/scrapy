{"version":3,"sources":["context/index.js","App.js","serviceWorker.js","index.js"],"names":["Context","createContext","bahasa","onLangChange","tema","onThemeChange","App","useContext","style","height","width","display","flexDirection","justifyContent","alignItems","backgroundColor","color","onClick","Boolean","window","location","hostname","match","TopComponent","setState","prevState","state","Provider","value","this","React","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wNAEaA,G,MAAUC,wBAAe,CAClCC,OAAQ,KACRC,aAAc,aACdC,KAAM,QACNC,cAAe,gB,MC+BJC,MAjCf,WAAgB,IAAD,EACwCC,qBAAWP,GAAxDE,EADK,EACLA,OAAQE,EADH,EACGA,KAAMD,EADT,EACSA,aAAcE,EADvB,EACuBA,cAEpC,OAEE,yBAAKG,MAAO,CAAEC,OAAQ,QAClBC,MAAO,QACPC,QAAS,OACTC,cAAe,SACfC,eAAgB,SAChBC,WAAY,SACZC,gBAA0B,SAATX,EAAkB,QAAU,UAC/C,wBAAII,MAAO,CAAEQ,MAAgB,SAATZ,EAAkB,QAAU,UACjC,OAAXF,EACA,iCAEA,kBAGJ,4BAAQe,QAAS,WACfd,IACAE,MAEW,OAAXH,EACE,eAEA,mBClBUgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,ICXAC,E,kDACJ,aAAe,IAAD,8BACZ,gBACKpB,aAAe,WAClB,EAAKqB,UAAS,SAAAC,GAAS,MAAK,CAC1BvB,OAA6B,OAArBuB,EAAUvB,OAAkB,KAAO,UAI/C,EAAKG,cAAgB,WACnB,EAAKmB,UAAS,SAAAC,GAAS,MAAK,CAC1BrB,KAAyB,UAAnBqB,EAAUrB,KAAmB,OAAS,aAIhD,EAAKsB,MAAQ,CACXxB,OAAQ,KACRC,aAAc,EAAKA,aACnBC,KAAM,QACNC,cAAe,EAAKA,eAlBV,E,qDAuBZ,OACE,kBAACL,EAAQ2B,SAAT,CAAkBC,MAAOC,KAAKH,OAC5B,kBAAC,EAAD,W,GA1BmBI,IAAMC,WAgCjCC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SD0FpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.4f1bcb72.chunk.js","sourcesContent":["import {createContext} from 'react';\r\n\r\nexport const Context = createContext ({\r\n    bahasa: 'id',\r\n    onLangChange: () => {},\r\n    tema: 'light',\r\n    onThemeChange: () => {}\r\n})","import React, { useContext } from 'react';\nimport { Context } from './context'\nimport './App.css';\n\nfunction App() {\n  const { bahasa, tema, onLangChange, onThemeChange} = useContext(Context);\n\n  return (\n    \n    <div style={{ height: '100vh',\n        width: '100vw',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        backgroundColor: tema === 'dark' ? 'black' : 'white' }} >\n      <h1 style={{ color: tema === 'dark' ? 'white' : 'black' }}>\n        { bahasa === 'id' ? \n          'Selamat datang di masterscrapy' \n          : \n          'Rahasia Pintar'}\n      </h1>\n\n      <button onClick={() => {\n        onLangChange();\n        onThemeChange();\n      }}>{\n        bahasa === 'id' ? \n          'Siswa Pintar' \n          : \n          'Smart Student'\n      }</button>\n    </div>\n  \n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Context } from './context';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nclass TopComponent extends React.Component {\n  constructor() {\n    super()\n    this.onLangChange = () => {\n      this.setState(prevState => ({\n        bahasa: prevState.bahasa === 'id' ? 'en' : 'id'\n      }))\n    }\n\n    this.onThemeChange = () => {\n      this.setState(prevState => ({\n        tema: prevState.tema === 'light' ? 'dark' : 'light'\n      }))\n    }\n\n    this.state = {\n      bahasa: 'id',\n      onLangChange: this.onLangChange,\n      tema: 'light',\n      onThemeChange: this.onThemeChange\n    }\n  }\n\n  render() {\n    return(\n      <Context.Provider value={this.state}>\n        <App />\n      </Context.Provider>\n    )\n  }\n}\n\nReactDOM.render(\n  <TopComponent/>,\n  document.getElementById('root')\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}